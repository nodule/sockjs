{
  "onLineStart": {
   "tokensExpected": 1,

    // Note: forces left hand scope on new line
    // Trick alert..
    this.lexer.toScope('LeftHandScope');
  },

  "validate": {
    "ARROW": "/->|→/",
    "PAIRED_ARROW": "/=>|⇉/",
    "INCLUDE_ARROW": "/~>/",
    "COLLECT_ARROW": "/>=/"
  },

  // All have the same target scope here.
  // Except one uses the default and goes back to root scope EXPORT_IN
  "onToken": {

    if(this.validate.ARROW.test(token)) {

      // first on line means EXPORT_IN
      if(this.lexer.tokens.length === 0) {
        this.lexer.present('EXPORT_IN', token);
      } else {
        this.lexer.present('ARROW', token);
      }

      this.lexer.toScope('RightHandScope');

      return true;
    } else if(this.validate.PAIRED_ARROW.test(token)) {
      this.lexer.present('PAIRED_ARROW', token);
      this.lexer.toScope('RightHandScope');
      return true;
    } else if(this.validate.COLLECT_ARROW.test(token)) {
      this.lexer.present('COLLECT_ARROW', token);
      this.lexer.toScope('RightHandScope');
      return true;
    } else if(this.validate.INCLUDE_ARROW.test(token)) {
      this.lexer.present('INCLUDE_ARROW', token);
      this.lexer.toScope('RightHandScope');
      return true;
    } else {
      // enabled running on each token again.
      // throw new Error('Unhandled token: ' + token);
    }

  }

}
