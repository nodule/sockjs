'use strict';

/*jshint -W030 */

require('should');

var Loader = require('../loader');

describe('Loader:', function() {

  var loader;

  before(function() {
    loader       = new Loader();
    loader.addNodeDefinitions('@', [{
      ns: 'my', name: 'component',
      ports: {
        input: {
          'in': {
            type: 'string'
          }
        },
        output: {
          out: {
            type: 'string'
          }
        }
      }
    }, {
      ns: 'my', name: 'component2',
      ports: {input: {in: {type: 'string'}}}
    }]);

  });

  it('Should be able to add nodeDefinitions', function() {

    loader.nodeDefinitions.should.not.eql({});
    loader.nodeDefinitions.should.have.property('@');
    loader.nodeDefinitions['@'].should.have.property('my');
    loader.nodeDefinitions['@'].should.have.property('my');
    loader.nodeDefinitions['@'].my.should.have.property('component');
    loader.nodeDefinitions['@'].my.should.have.property('component2');

  });
  it('Should be able to get *all* nodeDefinitions', function() {

    var definitions = loader.getNodeDefinitions();
    definitions.should.have.property('@');
    definitions['@'].should.have.property('my');
    definitions['@'].should.have.property('my');
    definitions['@'].my.should.have.property('component');
    definitions['@'].my.should.have.property('component2');

  });

  it('Should be able to get nodeDefinitions for provider `@`', function() {

    var definitions = loader.getNodeDefinitions('@');
    definitions.should.have.property('my');
    definitions.should.have.property('my');
    definitions.my.should.have.property('component');
    definitions.my.should.have.property('component2');

  });

  it('Should be able to tell it has a nodeDefinition from provider `@`',
    function() {
      loader.hasNodeDefinition('@', 'my', 'component').should.be.ok;
      loader.hasNodeDefinition('@', 'my', 'component2').should.be.ok;
    }
  );

  it('Should be able to get a nodeDefinition from provider `@`', function() {
    var def;

    def = loader.getNodeDefinitionFrom('@', 'my', 'component');
    def.should.have.property('ns');
    def.should.have.property('name');
    def.ns.should.eql('my');
    def.name.should.eql('component');

    def = loader.getNodeDefinitionFrom('@', 'my', 'component2');
    def.should.have.property('ns');
    def.should.have.property('name');
    def.ns.should.eql('my');
    def.name.should.eql('component2');

  });

  it('Should be able to parse dependencies', function() {
    var def1 = {
      dependencies: {
        npm: {
          'my-mod': '1.x.x',
          'my-mod2': '2.1.0'
        }
      }
    };

    var def2 = {
      dependencies: {
        npm: {
          'my-mod3': '1.1.x',
          'my-mod4': '3.1.0'
        }
      }
    };

    var def3 = {
      dependencies: {
        bower: {
          'my-bower': 'My/bower',
          'my-bower2': 'My/bower2#master'
        }
      }
    };

    var dependencies = {};

    var expected = {
      npm: {
        'my-mod': '1.x.x',
        'my-mod2': '2.1.0',
        'my-mod3': '1.1.x',
        'my-mod4': '3.1.0'
      },
      bower: {
        'my-bower': 'My/bower',
        'my-bower2': 'My/bower2#master'
      }
    };

    loader._parseDependencies(dependencies, def1);
    loader._parseDependencies(dependencies, def2);
    loader._parseDependencies(dependencies, def3);

    dependencies.should.eql(expected);

  });

});
