'use strict';

/*jshint -W030 */

require('should');

var Loader = require('../remote');
var http = require('http');
var ecstatic = require('ecstatic');
var yaml = require('js-yaml');
var fs = require('fs');

function loadGraph(name) {
  return yaml.safeLoad(
    fs.readFileSync(__dirname + '/fixtures/' + name + '.yaml', 'utf8')
  );
}

describe('Remote Loader:', function() {

  var server;
  var loader;
  var graph;

  before(function() {

    var port = 2300;

    loader       = new Loader();
    // load fixture.

    // serve providers directory
    var dir = __dirname + '/fixtures/providers';
    server = http.createServer(
      ecstatic({root: dir})
    ).listen(port);

    console.info('Testserver started on port', port);

  });

  after(function() {
    // stop server
    server.close(function() {
      console.info('Testserver stopped');
    });
  });

  it('Should have a default provider', function(done) {
    loader = new Loader();
    loader.defaultProvider.should.be.ok;
    done();

  });

  it('The graph fixture itself should be correct', function(done) {
    // Y @ X
    graph = loadGraph('graph');

    // setup check, whether the graph itself is ok
    graph.providers.should.be.ok;
    graph.providers.Y.should.be.ok;
    graph.providers.Y.name.should.be.ok;
    graph.providers.Y.url.should.be.ok;

    graph.providers.Q.should.be.ok;
    graph.providers.Q.name.should.be.ok;
    graph.providers.Q.url.should.be.ok;

    graph.providers['@'].should.be.ok;
    graph.providers['@'].url.should.be.ok;

    graph.nodes.should.be.ok;
    graph.nodes[0].provider.should.eql('Y');
    graph.nodes[1].should.not.have.property('provider');
    graph.nodes[2].provider.should.eql('Q');

    done();

  });

  // Ok resolving of the map must always be done.
  // but then it detects the url is already loaded
  // so all it needs to do is resolve the provider for the node.
  // and set node.provider to the url instead of the namespace
  it('Should be able to load providers', function(done) {

    loader.load(graph, function(err, result) {
      result.nodeDefinitions.should.be.ok;

      result.nodeDefinitions.should.have.property(
        'http://localhost:2300/Y/{ns}/{name}.json'
      );
      result.nodeDefinitions['http://localhost:2300/Y/{ns}/{name}.json'].
      should.have.property('math');

      result.nodeDefinitions.should.have.property(
        'http://localhost:2300/Q/{ns}/{name}.json'
      );
      result.nodeDefinitions['http://localhost:2300/Q/{ns}/{name}.json'].
      should.have.property('console');

      result.nodeDefinitions.should.have.property(
        'http://localhost:2300/@/{ns}/{name}.json'
      );
      result.nodeDefinitions['http://localhost:2300/@/{ns}/{name}.json'].
      should.have.property('math');

      result.should.have.property('dependencies');
      result.dependencies.should.eql({
        npm: {
          bogus: '0.x.x'
        }
      });

      loader.loadNodeDefinitionFrom(
        'http://localhost:2300/Q/{ns}/{name}.json',
        'console', 'log', function(def, dependencies) {

          var expected = {
          npm: {
            bogus: '0.x.x'
          }
        };

          dependencies.should.eql(expected);

          loader.hasDependencies().should.be.ok;
          loader.hasDependencies('npm').should.be.ok;
          loader.hasDependencies('bower').should.not.be.ok;

          loader.getDependencies('npm').should.eql(expected.npm);
          loader.getDependencies('bower').should.eql({});

          loader.loadNodeDefinitionFrom(
            'http://localhost:2300/Q/{ns}/{name}.json',
          'console', 'graph', function(def, dependencies) {
          def.ns.should.eql('console');
          def.name.should.eql('graph');

          dependencies.should.eql({
            npm: {
              bogus: '0.x.x'
            }
          });

          done();
        });
        });

    });

  });

  it('Should be able to preload providers', function(done) {
    var loader = new Loader();
    loader.preload({
      provider: 'http://localhost:2300/Y/{ns}/{name}.json',
      collection: 'http://localhost:2300/Y/nodes.json'
    }, function(err, provider, nodeDefinitions) {
      provider.should.eql('http://localhost:2300/Y/{ns}/{name}.json');
      nodeDefinitions.should.equal(
        loader.nodeDefinitions['http://localhost:2300/Y/{ns}/{name}.json']
      );
      done();
    });
  });

});
