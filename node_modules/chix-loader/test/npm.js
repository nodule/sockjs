'use strict';

/* jshint -W030 */
/* global describe, it, before */

require('should');

var NPMLoader = require('../npm');
var yaml = require('js-yaml');
var fs = require('fs');

function loadGraph(name) {
  return yaml.safeLoad(
    fs.readFileSync(__dirname + '/fixtures/' + name + '.yaml', 'utf8')
  );
}

describe('NPM Loader:', function() {

  var loader;
  var graph;

  before(function() {
    loader = new NPMLoader();
  });

  it('Should not have a default provider', function(done) {
    loader.should.not.have.property('defaultProvider');
    done();
  });

  it('The graph fixture itself should be correct', function(done) {
    graph = loadGraph('npm');
    graph.should.not.have.property('providers');
    graph.nodes.should.be.ok;
    graph.nodes[0].should.not.have.property('provider');
    graph.nodes[1].should.not.have.property('provider');
    done();
  });

  // this asumes chix-test is installed as dev dependency
  it('Should be able to load @ definitions', function(done) {

    loader.load(graph, function(err, result) {

      result.nodeDefinitions.should.be.ok;

      result.nodeDefinitions.should.have.property('@');
      result.nodeDefinitions['@'].should.have.property('test');
      result.nodeDefinitions['@'].test.should.have.property('Repeat');
      result.nodeDefinitions['@'].test.should.have.property('Drop');

      loader.hasNodeDefinition('@', 'test', 'Repeat').should.be.ok;
      loader.hasNodeDefinition('@', 'test', 'Drop').should.be.ok;

      /* add several other nodes to test/ which does include this stuff.
            result.should.have.property('dependencies');
            result.dependencies.should.eql({
              npm: {
                bogus: '0.x.x'
              }
            });
      */

      loader.loadNodeDefinitionFrom(
        '@',
        'test', 'Repeat', function(def, dependencies) {
          /*
                  var expected = {
                    npm: {
                      bogus: '0.x.x'
                    }
                  };

*/
          dependencies.should.eql({});

          loader.loadNodeDefinitionFrom(
          '@', 'test', 'Drop', function(def, dependencies) {
          def.ns.should.eql('test');
          def.name.should.equal('Drop');
          dependencies.should.eql({});
          done();
        });
        });

    });

  });

  it('Should be able to preload providers', function(done) {
    var loader = new NPMLoader();
    // doesn't need not config?
    loader.preload({}, function(err, provider, nodeDefinitions) {
      provider.should.eql('@');
      nodeDefinitions.should.equal(
       loader.nodeDefinitions['@']
      );
      done();
    });
  });

});
