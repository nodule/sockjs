'use strict';

var Loader = require('./loader');
var util = require('util');
var path = require('path');
var glob = require('glob');

/**
*
* Loads and saves definitions from npm.
*
* If npm is used, graphs cannot contain providers.
*
* All comonents must be available through npm installed packages.
*
*/
function NPMLoader(opts) {
  if (!(this instanceof NPMLoader)) {
    return new NPMLoader(opts);
  }

  opts = opts || {};

  this.opts = {};

  this.pkgKey = 'chix';

  // Call the super's constructor
  Loader.apply(this, arguments);

  this._init();
}

util.inherits(NPMLoader, Loader);

NPMLoader.prototype._init = function() {
  var self = this;

  function load(dir) {
    var pattern = path.resolve(
      dir, './node_modules'
    ) + '/*/package.json';

    glob.sync(pattern).forEach(function(file) {
      var defs;
      var pkg = require(file);
      if (pkg[self.pkgKey]) {
        defs = require(path.dirname(file));
        Object.keys(defs).forEach(function(key) {
          self.addNodeDefinition('@', defs[key]);
        });
        load(path.join(dir, pkg.name));
      }
    });
  }

  load(process.cwd());
};

NPMLoader.prototype.preload = function(conf, callback) {
  if (!callback) {
    callback = conf;
  }
  callback(null, '@', this.nodeDefinitions['@']);
};

/**
*
* Node Definitions from npm are already preloaded.
*
* In this case load just checks whether graph dependencies are
* all known to the loader or else send an error back to the callback.
*
* @param {Object} map
* @param {Function} callback
* @param {Boolean} update
*/
NPMLoader.prototype.load = function(map, callback /*, update*/) {
  var self = this;
  var j;

  // is not only used for the error reporting
  function resolveDefinitions(map) {
    // Loop all nodes from this flow
    for (j = 0; j < map.nodes.length; j++) {
      var node = map.nodes[j];
      if (!self.hasNodeDefinition('@', node.ns, node.name)) {
        callback(
          Error(
            util.format([
              'Nodedefinition for %s:%s not installed',
              '\tPlease install it first using `npm i chix-%s`',
              ].join('\n'),
              node.ns, node.name, node.ns
            )
          )
        );
        return false;
      }
      if (node.type === 'flow') {
        resolveDefinitions(node);
      }
    }
    return true;
  }

  // no `maybe` sync
  process.nextTick(function() {
    if (resolveDefinitions(map)) {
      callback(null, {
        providerLocation: 'npm', // not used I hope
        // these should probably only be the resolved ones from the map
        nodeDefinitions: self.nodeDefinitions
      });
    }
  });
};

/**
*
* NPM loader does not store it's definitions
*
*/
NPMLoader.prototype.saveNodeDefinition = function() {
  // nop
};

module.exports = NPMLoader;
