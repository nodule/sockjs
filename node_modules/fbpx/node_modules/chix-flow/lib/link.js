'use strict';

var util = require('util');
var uuid = require('uuid').v4;
var Connector = require('./connector');
var Setting = require('./setting');
var validate = require('./validate');

/**
 *
 * xLink
 *
 *
 * Settings:
 *
 *   - ttl
 *   - expire
 *   - dispose: true
 *
 * Just need something to indicate it's an iip.
 *
 * @constructor
 * @public
 */
function Link(id, ioid) {

  this.fills = 0;
  this.writes = 0;
  this.rejects = 0;
  this.id = id === undefined ? uuid() : id;
  this.ioid = ioid || uuid();
  this.metadata = {};

}

util.inherits(Link, Setting);

Link.create = function(ln) {

  ln = ln || {};

  var link = new Link(ln.id, ln.ioid);

  if (ln.source || ln.target) {
    link.build(ln);
  }

  return link;

};

Link.prototype.build = function(ln) {

  if (!ln.source) {
    throw Error('Create link expects a source');
  }

  if (!ln.target) {
    throw Error('Create link expects a target');
  }

  validate.link(ln);

  this.setSource(
    ln.source.id,
    ln.source.port,
    ln.source.setting,
    ln.source.action
  );

  if (ln.metadata) {
    this.setMetadata(ln.metadata);
  } else {
    this.setMetadata({});
  }

  this.setTarget(
    ln.target.id,
    ln.target.port,
    ln.target.setting,
    ln.target.action
  );

};

/**
 *
 * Set target
 *
 * @param {String} targetId
 * @param {String} port
 * @param {Object} settings
 * @param {String} action
 * @public
 */
Link.prototype.setTarget = function(targetId, port, settings, action) {

  this.target = new Connector(settings);
  this.target.wire = this;
  this.target.plug(targetId, port, action);

};

Link.prototype.write = function(p) {

  this.writes++;

  // just re-emit
  this.emit('data', p);

};

/**
 *
 * Set Source
 *
 * @param {Object} sourceId
 * @param {String} port
 * @param {Object} settings
 * @param {String} action
 * @public
 */
Link.prototype.setSource = function(sourceId, port, settings, action) {

  this.source = new Connector(settings);
  this.source.wire = this;
  this.source.plug(sourceId, port, action);

};

/**
 *
 * Setting of pid's is delayed.
 * I would like them to be available during plug.
 * but whatever.
 *
 */

Link.prototype.setSourcePid = function(pid) {
  this.source.setPid(pid);
};

Link.prototype.setTargetPid = function(pid) {
  this.target.setPid(pid);
};

Link.prototype.setMetadata = function(metadata) {
  this.metadata = metadata;
};

Link.prototype.setMeta = function(key, val) {
  this.metadata[key] = val;
};

/**
 *
 * Set Title
 *
 * @param {String} title
 * @public
 */
Link.prototype.setTitle = function(title) {

  this.setMeta('title', title);

  this.emit('change', this, 'metadata', this.metadata);

};

Link.prototype.clear = function() {

  this.fills = 0;
  this.writes = 0;
  this.rejects = 0;

  this.emit('clear', this);

};

/**
 *
 * Update link by passing it a full object.
 *
 * Will only emit one change event.
 *
 */
Link.prototype.update = function(ln) {

  this.build(ln);

  this.emit('change', this);

};

Link.prototype.toJSON = function() {

  // TODO: use schema validation for toJSON
  if (!this.hasOwnProperty('source')) {
    console.log(this);
    throw Error('Link should have a source property');
  }
  if (!this.hasOwnProperty('target')) {
    throw Error('Link should have a target property');
  }

  var link = {
    id: this.id,
    source: this.source.toJSON(),
    target: this.target.toJSON()
  };

  if (this.metadata) {
    link.metadata = this.metadata;
  }

  if (this.fills) {
    link.fills = this.fills;
  }

  if (this.rejects) {
    link.rejects = this.rejects;
  }

  if (this.writes) {
    link.writes = this.writes;
  }

  if (this.data !== undefined) {
    link.data = JSON.parse(JSON.stringify(this.data));
  }

  return link;
};

module.exports = Link;
