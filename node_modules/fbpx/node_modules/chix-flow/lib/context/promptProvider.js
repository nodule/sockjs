'use strict';

var prompt = require('prompt');

/**
 *
 * Prompt Context Provider
 *
 * @constructor
 * @public
 */
function PromptProvider() {
  this.questions = [];
  this.questioning = false;
}

PromptProvider.prototype.addContext = function(node, defaultContext) {
  node.inputTimeout = 120000;

  if (typeof defaultContext !== 'undefined') {
    var question = this.askForContext(node, defaultContext);

    if (!this.questioning) {
      question(node, defaultContext);
    } else {
      this.questions.push(question);
    }
  }
};

PromptProvider.prototype.askForContext = function(node, defaultContext) {
  var self = this;

  return function() {

    self.questioning = true;

    prompt.start();
    prompt.message = 'Chi'.cyan.bold + 'Ï‡'.zebra + ':'.green + node.name;
    console.log(node.identifier, defaultContext);
    prompt.get({properties: defaultContext}, function(err, result) {

      if (err) {
        throw err;
      }

      for (var key in result) {
        if (result.hasOwnProperty(key)) {

          if (typeof defaultContext[key] === 'object') {
            result[key] = JSON.parse(result[key]);
          }

          node.setContextProperty(key, result[key]);

        }
      }

      if (self.questions.length) {
        var question = self.questions.pop();
        question();
      } else {
        self.questioning = true;
      }
    });
  };
};

module.exports = PromptProvider;
