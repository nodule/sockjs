'use strict';

var expect = require('chai').expect;
var Parser = require('../chix');
var fs = require('fs');

describe('Loading a graph', function () {
  
  var fbp_namespaced = fs.readFileSync('test/fixtures/namespaced.fbp');
  var fbp_graph = fs.readFileSync('test/fixtures/graph.fbp');

  it('By default has a provider set', function () {

    var parser = new Parser({
      skipIDs: true
    });

    var json = parser.parse(fbp_graph);
    expect(json).to.eql({
      title: 'My Graph',
      ns: 'test',
      name: 'myGraph',
      type: 'flow',
      nodes: [{
        id: 'Log',
        title: 'Log',
        ns: 'console',
        name: 'log'
      }, {
        id: 'Repeat',
        title: 'Repeat',
        ns: 'test',
        name: 'repeat'
      }],
      links: [{
        metadata: {
          title: 'Repeat out -> msg Log'
        },
        source: {
          id: 'Repeat',
          port: 'out'
        },
        target: {
          id: 'Log',
          port: 'msg'
        }
      }],
      providers: {
        '@': {
          url: 'https://serve-chix.rhcloud.com/nodes/{ns}/{name}'
        }
      }
    });
  });

  it('Custom default provider if one is set', function () {

    var parser = new Parser({
      skipIDs: true,
      defaultProvider: 'https://localhost/nodes/{ns}/{name}'
    });

    var json = parser.parse(fbp_graph);
    expect(json).to.eql({
      title: 'My Graph',
      ns: 'test',
      name: 'myGraph',
      type: 'flow',
      nodes: [{
        id: 'Log',
        title: 'Log',
        ns: 'console',
        name: 'log'
      }, {
        id: 'Repeat',
        title: 'Repeat',
        ns: 'test',
        name: 'repeat'
      }],
      links: [{
        metadata: {
          title: 'Repeat out -> msg Log'
        },
        source: {
          id: 'Repeat',
          port: 'out'
        },
        target: {
          id: 'Log',
          port: 'msg'
        }
      }],
      providers: {
        '@': {
          url: 'https://localhost/nodes/{ns}/{name}'
        }
      }
    });
  });

  it('No provider if defaultProvider is false', function () {

    var parser = new Parser({
      skipIDs: true,
      defaultProvider: false
    });

    var json = parser.parse(fbp_graph);
    expect(json).to.eql({
      title: 'My Graph',
      ns: 'test',
      name: 'myGraph',
      type: 'flow',
      nodes: [{
        id: 'Log',
        title: 'Log',
        ns: 'console',
        name: 'log'
      }, {
        id: 'Repeat',
        title: 'Repeat',
        ns: 'test',
        name: 'repeat'
      }],
      links: [{
        metadata: {
          title: 'Repeat out -> msg Log'
        },
        source: {
          id: 'Repeat',
          port: 'out'
        },
        target: {
          id: 'Log',
          port: 'msg'
        }
      }]
    });
  });

  it('Understands provider namespacing', function () {

    var parser = new Parser({
      skipIDs: true
    });

    var json = parser.parse(fbp_namespaced);
    expect(json).to.eql({
      title: 'My Graph',
      ns: 'test',
      name: 'myGraph',
      type: 'flow',
      nodes: [{
        id: 'Log',
        title: 'Log',
        ns: 'console',
        name: 'log'
      }, {
        id: 'Repeat',
        title: 'Repeat',
        ns: 'test',
        name: 'repeat',
        provider: 'x'
      }],
      links: [{
        metadata: {
          title: 'Repeat out -> msg Log'
        },
        source: {
          id: 'Repeat',
          port: 'out'
        },
        target: {
          id: 'Log',
          port: 'msg'
        }
      }],
      providers: {
        '@': {
          url: 'https://serve-chix.rhcloud.com/nodes/{ns}/{name}'
        },
        x: {
          name: 'x',
          url: 'https://localhost/{ns}/{name}'
        }
      }
    });
  });

});