 'use strict';

 /* jshint maxlen:400 */

 var chai = require('chai');
 var createParser = require('./helper').createParser;

 describe('With a graph containing masks', function () {
   var fbpData, graphData;

   var parser = createParser();
   fbpData = '\nMyProc(my/proc), Proc2(my/proc)\nMyProc out -({\n"a": "my.prop"})> in Proc2';

   describe('the generated graph', function () {

     graphData = parser.parse(fbpData);

     it('should contain two nodes', function () {
       chai.expect(graphData.nodes[0]).to.eql({
         id: 'MyProc',
         title: 'MyProc',
         ns: 'my',
         name: 'proc'
       }, {
         id: 'Proc2',
         title: 'Proc2',
         ns: 'my',
         name: 'proc'
       });
     });

     it('should contain a link with mask', function () {
       chai.expect(graphData.links[0]).to.eql({
         metadata: {
           title: 'MyProc out -> in Proc2'
         },
         source: {
           id: 'MyProc',
           port: 'out'
         },
         target: {
           id: 'Proc2',
           port: 'in',
           setting: {
             mask: {
               a: 'my.prop'
             }
           }
         }

       });
     });

   });
 });
 describe('With a graph containing a pointer path', function () {
   var fbpData, graphData;

   var parser = createParser();
   fbpData = '\nMyProc(my/proc), Proc2(my/proc)\n{"title": "test"} -> in MyProc out -(/title)> in Proc2';

   describe('the generated graph', function () {

     graphData = parser.parse(fbpData);
console.log(graphData);
     it('should contain two nodes', function () {
       chai.expect(graphData.nodes[0]).to.eql({
         id: 'MyProc',
         title: 'MyProc',
         ns: 'my',
         name: 'proc'
       }, {
         id: 'Proc2',
         title: 'Proc2',
         ns: 'my',
         name: 'proc'
       });
     });

     it('should contain a link with mask', function () {
       chai.expect(graphData.links[0]).to.eql({
         metadata: {
           title: 'MyProc out -> in Proc2'
         },
         source: {
           id: 'MyProc',
           port: 'out'
         },
         target: {
           id: 'Proc2',
           port: 'in',
           setting: {
             mask: '/title'
           }
         }

       });
     });

   });
 });

 describe('With a slightly different graph containing masks', function () {
   var fbpData, graphData;

   var parser = createParser();
   fbpData = '\nMyProc(my/proc)\n Proc2(my/proc)\n {"title": "my title"} -> in MyProc out -({\n  "a": "my.prop"\n})> in Proc2';

   describe('the generated graph', function () {

     graphData = parser.parse(fbpData);

     it('should contain two nodes', function () {
       chai.expect(graphData.nodes[0]).to.eql({
         id: 'MyProc',
         title: 'MyProc',
         ns: 'my',
         name: 'proc'
       }, {
         id: 'Proc2',
         title: 'Proc2',
         ns: 'my',
         name: 'proc'
       });
     });

     it('should contain a link with mask', function () {
       chai.expect(graphData.links[0]).to.eql({
         metadata: {
           title: 'MyProc out -> in Proc2'
         },
         source: {
           id: 'MyProc',
           port: 'out'
         },
         target: {
           id: 'Proc2',
           port: 'in',
           setting: {
             mask: {
               a: 'my.prop'
             }
           }
         }

       });
     });

   });
 });