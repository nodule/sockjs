'use strict';

var util = require('util');
var Scope = require('dyslexer').Scope;

function RootScope(lexer) {

  Scope.apply(this, [lexer]);

}

util.inherits(RootScope, Scope);

RootScope.prototype.onLineStart = function() {
  // Note: forces left hand scope on new line
  this.tokensExpected = 1;
  this.lexer.toScope('LeftHandScope');
};

RootScope.prototype.setup = function() {
  var self = this;

  // only the arrow token is expected
  this.validate = {
    ARROW: /->|→/,
    PAIRED_ARROW: /=>|⇉/,
    INCLUDE_ARROW: /~>/,
    COLLECT_ARROW: />=/
  };

};

RootScope.prototype.onToken = function(token) {

  if (this.validate.ARROW.test(token)) {

    // first on line means EXPORT_IN
    if (this.lexer.tokens.length === 0) {
      this.lexer.present('EXPORT_IN', token);
    } else {
      this.lexer.present('ARROW', token);
    }

    this.lexer.toScope('RightHandScope');

    return true;
  } else if (this.validate.PAIRED_ARROW.test(token)) {
    this.lexer.present('PAIRED_ARROW', token);
    this.lexer.toScope('RightHandScope');
    return true;
  } else if (this.validate.COLLECT_ARROW.test(token)) {
    this.lexer.present('COLLECT_ARROW', token);
    this.lexer.toScope('RightHandScope');
    return true;
  } else if (this.validate.INCLUDE_ARROW.test(token)) {
    this.lexer.present('INCLUDE_ARROW', token);
    this.lexer.toScope('RightHandScope');
    return true;
  } else {
    // enabled running on each token again.
    // throw new Error('Unhandled token: ' + token);
  }

};

module.exports = RootScope;
