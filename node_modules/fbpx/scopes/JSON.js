'use strict';

var util = require('util');
var Scope = require('dyslexer').Scope;

/**
 *
 * This is the JSON scope it is entered
 * when JSON is encountered.
 *
 * It will quit the scope when we reach
 * either } or ] depending on what started the scope
 *
 * An attempt has been made to support nesting also.
 *
 */
function JSONScope(lexer) {
  Scope.apply(this, [lexer]);
}

util.inherits(JSONScope, Scope);

JSONScope.prototype.onEnter = function() {

  // As far as root is concerned
  // we have no token ending
  this.tokenEnding = [];

  // custom for this scope
  this.nesting = 0;

  // whether the lexer should check for
  // an escape \ one char back.
  // Ok the only problem will arrise if there is []
  // or {}  inside data strings. but whatever
  // This is not meant to be that advanced.
  //this.escape = true;
};

JSONScope.prototype.setup = function() {

  var self = this;

  this.rules = {

    '{': function() {
      if (self.lexer.scoper === '{') {
        self.nesting++;
      }
    },

    '[': function() {
      if (self.lexer.scoper === '[') {
        self.nesting++;
      }
    },

    '}': function() {
      if (self.lexer.scoper === '{') {
        if (self.nesting) {
          self.nesting--;
        } else {
          self.lexer.fireToken();
        }
      }
    },

    ']': function() {
      if (self.lexer.scoper === '[') {
        if (self.nesting) {
          self.nesting--;
        } else {
          self.lexer.fireToken();
        }
      }
    }

  };

  this.structure = [
    ['DATA']
  ];

};

JSONScope.prototype.onLineStart = function() {

  this.tokensExpected = 1;

};

JSONScope.prototype.onToken = function(token) {

  var inverse = {
    '{': '}',
    '[': ']'
  };

  // Note! it must be defined as real json,
  // so mind those quotes
  var line = [
    token,
    // a bit ugly, but as long as it's constantly ugly
    // it doesn't matter.
    // (scanner char is never added to the token value)
    inverse[this.lexer.scoper]
  ].join('');
  token = JSON.parse(line);

  this.lexer.present('DATA', token);
};

module.exports = JSONScope;
