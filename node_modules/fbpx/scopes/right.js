'use strict';

var util = require('util');
var Scope = require('dyslexer').Scope;

function RightHandScope(lexer) {
  Scope.apply(this, [lexer]);
}

util.inherits(RightHandScope, Scope);

RightHandScope.prototype.onEnter = function () {

  // do our own count
  this.count = 0;

};

RightHandScope.prototype.onLineStart = function () {
  //this.tokensExpected = 3;
  this.tokensExpected = 5;
};

RightHandScope.prototype.setup = function () {

  var self = this;

  // Used to validate the tokens.
  this.validate = {
    SOURCE_INDEX: /^\[[A-z0-9]+\]$/,
    TARGET_INDEX: /^\[[A-z0-9]+\]$/,
    IN_PORT: /[A-z0-9_:]+/,
    PROCESS: /^[A-z0-9_:]+(\([A-z0-9:\.\-\/]*\))?$/
  };

  // Used by the lexer to validate token combinations.
  this.structure = [
    ['IN_PORT', 'PROCESS'],
    ['TARGET_INDEX', 'IN_PORT', 'PROCESS'],
    ['IN_PORT', 'PROCESS', 'OUT_PORT'],
    ['IN_PORT', 'PROCESS', 'OUT_PORT', 'SOURCE_INDEX'],
    ['TARGET_INDEX', 'IN_PORT', 'PROCESS', 'OUT_PORT'],
    ['TARGET_INDEX', 'IN_PORT', 'PROCESS', 'OUT_PORT', 'SOURCE_INDEX']
  ];

  this.rules = {

    // our lexers
    '#': function (c) {
      self.lexer.toScope('CommentScope', c);
    },

    '(': function (c) {
      if (self.lexer.token === '-') {
        self.lexer.toScope('MaskScope', c);
      }
    },

  };

};

RightHandScope.prototype.onToken = function (token) {

  if (this.validate['TARGET_INDEX'].test(token)) {
    if (this.count === 0) { // always the first
      this.lexer.present('TARGET_INDEX', token);
    }
    else {
      this.lexer.present('SOURCE_INDEX', token); // always last
      this.lexer.toScope('RootScope');
    }
  }
  else if (this.count === 0) {
    // must be the in port
    this.lexer.present('IN_PORT', token);
    this.count++;
  }
  else if (this.count === 1) {
    // Must be the process
    this.lexer.present('PROCESS', token);
    this.count++;
  }
  else if (this.count === 2) {
    this.lexer.present('OUT_PORT', token);
    this.count++;
  }

};

module.exports = RightHandScope;
