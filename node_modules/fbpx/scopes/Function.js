'use strict';

var util = require('util');
var Scope = require('dyslexer').Scope;

/**
 *
 * This is the Function scope it is entered
 * when a () block is encountered.
 *
 * It will quit the scope when we reach a closing )
 *
 */
function FunctionScope(lexer) {
  Scope.apply(this, [lexer]);
}

util.inherits(FunctionScope, Scope);

FunctionScope.prototype.onEnter = function() {

  // As far as root is concerned
  // we have no token ending
  this.tokenEnding = [];

  // custom for this scope
  this.nesting = 0;

};

// TODO nesting will probably break in some weird
// escaped situations. or like adding comments
// like /* hi ( */
FunctionScope.prototype.setup = function() {

  var self = this;

  this.rules = {

    '(': function() {
      self.nesting++;
    },

    ')': function() {
      if (self.nesting) {
        self.nesting--;
      } else {
        self.lexer.fireToken();
      }
    }

  };

  this.structure = [
    ['DATA']
  ];

};

FunctionScope.prototype.onLineStart = function() {

  this.tokensExpected = 1;

};

FunctionScope.prototype.onToken = function(token) {

  token = token.replace(/^\s*\(/, '');

  // render can take care of making it a real function or not.
  this.lexer.present('DATA', token);
};

module.exports = FunctionScope;
