'use strict';

var util = require('util');
var Scope = require('dyslexer').Scope;

/**
 *
 * This is the JSON scope it is entered
 * when JSON is encountered.
 *
 * It will quit the scope when we reach
 * either } or ] depending on what started the scope
 *
 * An attempt has been made to support nesting also.
 *
 */

// All we need is simply neh, don't need this at all.
// just need to jump back.
function ActionScope(lexer) {
  Scope.apply(this, [lexer]);
}

util.inherits(ActionScope, Scope);

ActionScope.prototype.setup = function() {

  // err, ok all is wrapped within action_start
  // and action_end
  this.structure = [
    ['ACTION_START'],
    ['ACTION_END']
  ];

};

ActionScope.prototype.onLineStart = function() {

  this.tokensExpected = 1;

};

ActionScope.prototype.onToken = function(token) {

  // ok, this is skipped by LeftHandScope.
  // bit magical ah well.
  if (token === '{') {
    this.lexer.present('ACTION_START', token);
    this.lexer.toScope('LeftHandScope');
  }

};

module.exports = ActionScope;
