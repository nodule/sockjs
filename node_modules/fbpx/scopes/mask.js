'use strict';

var util = require('util');
var Scope = require('dyslexer').Scope;

/**
 *
 * This is the Mask scope it is entered
 * when a mask is encountered.
 *
 * This scope is entered after -( was detected in leftHandScope
 *
 * It will quit the scope when we reach )>
 */
function MaskScope(lexer) {
  Scope.apply(this, [lexer]);
}

util.inherits(MaskScope, Scope);

MaskScope.prototype.onEnter = function() {
  // No token ending until > is encountered
  this.tokenEnding = [];
};

MaskScope.prototype.setup = function() {

  var self = this;

  this.rules = {

    '>': function() {
      self.tokenEnding = [' '];
    }

  };

  this.structure = [
    ['MASK']
  ];

};

MaskScope.prototype.onLineStart = function() {
  this.tokensExpected = 1;
};

MaskScope.prototype.onToken = function(token) {
  var match = token.match(/\(([\s\S]*)\)/m);
  if (match[1] === undefined) {
    throw Error('Unable to detect mask');
  } else {
    token = match[1];
  }

  var val;
  try {
    val = JSON.parse(token);
  } catch (e) {
    val = token;
  }
  this.lexer.present('MASK', val);
  // is right hand correct?
  this.lexer.toScope('RightHandScope');
};

module.exports = MaskScope;
