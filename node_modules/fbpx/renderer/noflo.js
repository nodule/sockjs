'use strict';

var Renderer = function() {

  if (!(this instanceof Renderer)) {
    return new Renderer();
  }

  this.reset();

};

Renderer.prototype.reset = function() {

  this.flow = {
    connections: [],
    processes: {},
    exports: []
  };

};

/**
 *
 * Called from the fbpParser
 *
 */
Renderer.prototype.parseComponentString = function(component, node) {

  var m = component.split(':');
  if (m.length === 1) {
    node.component = component;
  } else {
    node.component = m.shift();
    node.metadata = m;
  }

  return node;

};

Renderer.prototype.touchNode = function(/*processName*/) {

};

Renderer.prototype.addNode = function(c) {

  this.flow.processes[c.process] = {
    component: c.component
  };

  if (c.metadata) {

    this.flow.processes[c.process].metadata = {
      routes: c.metadata
    };

  }

};

Renderer.prototype.addContext = function(/*process, in_port, context*/) {

};

Renderer.prototype.addProvider = function(/*provider*/) {
  /*
  if (!this.flow.providers)  this.flow.providers = [];
  this.flow.providers.push(provider);
  */
};

Renderer.prototype.addMeta = function(/*name, value*/) {
  // this.flow[name] = value;
};

Renderer.prototype.addExport = function(e) {

  this.flow.exports.push({
    'private': [
      e.process,
      e.port
    ].join('.').toLowerCase(),
    'public': e.name.toLowerCase()
  });

};

Renderer.prototype.addLink = function(link) {

  var connection = {};
  connection.tgt = {
    process: link.target,
    port: link.in.toLowerCase()
  };

  if(undefined !== link.targetIndex) {
    connection.tgt.index = link.targetIndex;
  }

  if (link.source) {

    connection.src = {
      process: link.source,
      port: link.out.toLowerCase()
    };

    if(undefined !== link.sourceIndex) {
      connection.src.index = link.sourceIndex;
    }
  }

  if (typeof link.data !== 'undefined') {
    connection.data = link.data;
  }

  this.flow.connections.push(connection);

};

Renderer.prototype.fbpdoc = function(/*params*/) {
};

Renderer.prototype.getFlow = function() {
  return JSON.parse(JSON.stringify(this.flow));
};

Renderer.prototype.toJSON = function() {
  return JSON.stringify(this.flow, null, 2);
};

module.exports = Renderer;
