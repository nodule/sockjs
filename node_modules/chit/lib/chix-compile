#!/usr/bin/env node
var fs = require('fs'),
  path = require('path'),
//  NodeBox = require('chix-flow').NodeBox,
  extend = require('util')._extend,
  program = require('commander'),
  pkg = require('../package.json'),
  version = pkg.version,
  glob = require('glob'),
  b = require('browserify')(),
  schema = require('chix-flow').Schema,
  jsonGate = require('json-gate'),
  nodeSchema = jsonGate.createSchema(schema.Node),
  mapSchema = jsonGate.createSchema(schema.Map);

var dirname = __dirname;
var pkg = require(dirname + '/package');

var x = {
 name: pkg.chix.name,
 description: pkg.description,
 version: pkg.version,
 licences: pkg.licenses,
 repository: pkg.repository,
 dependencies: pkg.dependencies,
 nodes: [],
 twigs: []
};

// pkg can indicate whether it should be run on the server only
// client only is also possible, but I didn't encounter this yet.
// this property will also automatically be added to the nodes
// unless a node overrides the package settings.
if(pkg.chix.env) {
 x.env = pkg.chix.env;
}

var fns = {};

glob(dirname + gpattern, function(err, files) {
  var parts, module, ext;
  for(var i = 0; i < files.length; i++) {

    parts = files[i].split('/');
    module = parts[1];
    ext = path.extname(files[i]);

    c = fs.readFileSync(files[i]).toString();

    var node = {};
    if(ext == ".js") {
      fns[module] = c; // warning: relies on .js before .json
    } else if(ext == ".json") {
      console.log(files[i]);
      var json = JSON.parse(c);

      if(!json.name) throw "name is missing in node.json file" + module;

      node = extend(node, json);

      // If the package specifies an environment
      // also add this to each node definition within this package
      // yet leave an option to override it.
      if(x.env && !node.env ) {
        node.env = x.env;
      }

      node.ns = node.ns ? node.ns : x.name; // add namespace if not specified by the node itself

      // Ok, this should be inSync with chix-flow
      // otherwise it's asking for problems.
      /*
      var NodeBox = new NodeBox();
      var arr = [];
      if(node.ports.input) arr = arr.concat(Object.keys(node.ports.input));
      if(node.require) arr = arr.concat(Object.keys(node.require));
      if(node.expose) arr = arr.concat(node.expose);
      arr.push('state', 'output');
      */

      node.fn = fns[module];

      x.nodes.push(node);

    }

  }

/*
  // add twigs
  glob(dirname + "/twigs/*.json*", function(err, files) {
    var file;

    // nodes within this twig are allowed to incorparate other
    // namespaces, but his twig belongs to this namespace

    for(var i = 0; i < files.length; i++) {
      twig = require(files[i]);
      twig.ns = x.name;

      mapSchema.validate(twig);

      x.twigs.push(twig);
    }

    var contents = JSON.stringify(x, null, 2);

    if(write) {
      console.log('writing x.json');
      fs.writeFileSync(dirname + '/x.json', contents);
    } else {
      console.log(contents);
    }

  });
*/

});
