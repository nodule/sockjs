// TODO: rewrite these, to ease up testing and make them less adhoc.

// IOError(PORT_INVALID, 'my_port');
// IOError(PORT_INVALID_DATA_TYPE, 'my_port', 'string', 'number');


function IOError(node, message) {
  if(!Errors[errno]) throw 'Unknown errno ' + errno;
  this.errno = errno;
  this.name = this.constructor.name;
  this.message = Errors.message[errno];
}

IOError.prototype = new Error();
IOError.prototype.constructor = IOError;
/*
var Errors = {

// actor.js:
throw Error('multiple arguments deprecated');
actor.js:    throw new Error(util.format( 'Failed to get node definition for %s:%s', node.ns, node.name));
actor.js:    throw Error('Node should have an id');
actor.js:    throw new Error('map is not defined');
actor.js:    throw new Error('addMap expects an object');
actor.js:      throw new Error(util.format('Node lacks an id: %s:%s', node.ns, node.name));
actor.js:      throw new Error(util.format('Failed to get node definition for %s:%s', node.ns, node.name));
actor.js:    throw Error('should not happen');
actor.js:    throw Error('Link must be of type Link');
actor.js:      throw Error('LINK MISSING IOID');
actor.js:    throw new Error(util.format('Cannot determine type for port:%s', link.target.port));
actor.js:        throw new Error(
actor.js:              throw Error('IIP connections  must have a source');
actor.js:        throw Error('Cannot find link');
actor.js:      throw Error('Actor must contain an id');
actor.js:    throw Error('Actor must contain an id');
actor.js:    throw Error('Actor must contain a pid');
actor.js:    throw Error('Target must be an object');
actor.js:  throw Error('TODO: reimplement actions');
actor.js:    throw new Error('This flow has no actions');
actor.js:    throw new Error('Action not found');
actor.js:    throw new Error(util.format('Node %s does not exist', id));

flow.js:    title: 'Error',
flow.js:    throw Error('this.action should return something with the action map');
flow.js:        throw new Error('DEPRECATED: index should be in setting section');
flow.js:    throw new Error(util.format('Unable to find exported port definition for %s port %s', type, port));
flow.js:            throw Error(util.format('No such input port %s', key));
flow.js:      throw Error('The map provided does not have any input ports available');
flow.js:        throw Error('The map provided does not have any output ports available');
flow.js:    throw Error('The map provided does not have any ports available');

node.js: * Error Event.
node.js:    throw new Error([
node.js:  if(util.isError(res)) {
node.js:      msg: Error('setContextProperty: ' + res.message)
node.js:      throw new Error([
node.js:      // TODO: eventemitter expects a new Error()
node.js:        msg: new Error(
node.js:    throw new Error([
node.js:      throw new Error(this.identifier + ': no such output port ' + port);
node.js: *  - Error
node.js:    throw new Error('how did you got through!?');
node.js:    throw new Error([
node.js:    throw new Error([
node.js:    throw new Error([
node.js:    throw new Error([
node.js:      msg: Error(util.format('no such port: **%s**', port))
node.js:    return Error(util.format('Expected `%s` got `%s` on port `%s`', expected, real, port));
node.js:    throw new Error([
node.js:    throw new Error('Trying to send to a closed port open it first: ' + port);
node.js:  if (util.isError(res)) {
node.js:      msg: Error('_fillPort:' + res.message)
node.js:        throw Error([
node.js:    if(util.isError(ret)) {
node.js:            throw new Error([
node.js:      if(util.isError(ret)) {
node.js:        throw new Error([
node.js:      return new Error(util.format(
node.js:    throw new Error('Port `' + name + '` does not exist');
node.js:    throw new Error([
node.js:    throw new Error([
node.js:      throw new Error([
node.js:      throw new Error('No such input port: ' + key);

run.js:    throw new Error('No exposed output ports available for callback');

validate.js:function ValidationError(message, id, obj) {
validate.js:  this.name = 'ValidationError';
validate.js:		throw new Error('Cannot validate without nodeDefinitions');
validate.js:			throw new ValidationError(
validate.js:			throw new ValidationError(
validate.js:			throw new ValidationError(
validate.js:			throw new ValidationError('Source node does not exist ' + link.source.id);
validate.js:			throw new ValidationError('Target node does not exist ' + link.target.id);
validate.js:			throw new ValidationError([
validate.js:			throw new ValidationError([
*/
